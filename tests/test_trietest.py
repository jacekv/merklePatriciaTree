from unittest import TestCase

from mpt.trie import Trie

class TrieTest(TestCase):

    def test_exampleTrie(self):
        test = [
            [b"do", b"verb"],  # ok
            [b'dog', b'puppy'],
            [b'doge', b'coin'],
            [b'horse', b'stallion']
        ]
        h = self._feed_trie(test)
        self.assertTrue(h.hex() == '5991bb8c6514148a29db676a14ac506cd2cd5775ace63c30a4fe457715e9ac84')

    def test_emptyValue(self):
        test = [
            [b"do", b"verb"],
            [b"ether", b"wookiedoo"],
            [b"horse", b"stallion"],
            [b"shaman", b"horse"],
            [b"doge", b"coin"],
            [b"ether", ''],
            [b"dog", b"puppy"],
            [b"shaman", '']
        ]
        h = self._feed_trie(test)
        self.assertTrue(h.hex() == '5991bb8c6514148a29db676a14ac506cd2cd5775ace63c30a4fe457715e9ac84')

    def test_branchValueUpdate(self):
        test = [
            [b"abc", b"123"],
            [b"abcd", b"abcd"],
            [b"abc", b"abc"]
        ]
        h = self._feed_trie(test)
        self.assertTrue(h.hex() == '7a320748f780ad9ad5b0837302075ce0eeba6c26e3d8562c67ccc0f1b273298a')

    def test_insertMiddleLeaf(self):
        test = [[b"key1aa", b"0123456789012345678901234567890123456789xxx"],
                [b"key1", b"0123456789012345678901234567890123456789Very_Long"],
                [b"key2bb", b"aval3"],
                [b"key2", b"short"],
                [b"key3cc", b"aval3"],
                [b"key3", b"1234567890123456789012345678901"]
                ]
        h = self._feed_trie(test)
        self.assertTrue(h.hex() == 'cb65032e2f76c48b82b5c24b3db8f670ce73982869d38cd39a624f23d62a9e89')

    def test_branching(self):
        test = [
            [b"\x04\x11\x0d\x81\x6c\x38\x08\x12\xa4\x27\x96\x8e\xce\x99\xb1\xc9\x63\xdf\xbc\xe6", b"something"],
            [b"\x09\x5e\x7b\xae\xa6\xa6\xc7\xc4\xc2\xdf\xeb\x97\x7e\xfa\xc3\x26\xaf\x55\x2d\x87", b"something"],
            [b"\x0a\x51\x7d\x75\x5c\xeb\xbf\x66\x31\x2b\x30\xff\xf7\x13\x66\x6a\x9c\xb9\x17\xe0", b"something"],
            [b"\x24\xdd\x37\x8f\x51\xad\xc6\x7a\x50\xe3\x39\xe8\x03\x1f\xe9\xbd\x4a\xaf\xab\x36", b"something"],
            [b"\x29\x3f\x98\x2d\x00\x05\x32\xa7\x86\x1a\xb1\x22\xbd\xc4\xbb\xfd\x26\xbf\x90\x30", b"something"],
            [b"\x2c\xf5\x73\x2f\x01\x7b\x0c\xf1\xb1\xf1\x3a\x14\x78\xe1\x02\x39\x71\x6b\xf6\xb5", b"something"],
            [b"\x31\xc6\x40\xb9\x2c\x21\xa1\xf1\x46\x5c\x91\x07\x0b\x4b\x3b\x4d\x68\x54\x19\x5f", b"something"],
            [b"\x37\xf9\x98\x76\x48\x13\xb1\x36\xdd\xf5\xa7\x54\xf3\x40\x63\xfd\x03\x06\x5e\x36", b"something"],
            [b"\x37\xfa\x39\x9a\x74\x9c\x12\x1f\x8a\x15\xce\x77\xe3\xd9\xf9\xbe\xc8\x02\x0d\x7a", b"something"],
            [b"\x4f\x36\x65\x9f\xa6\x32\x31\x0b\x6e\xc4\x38\xde\xa4\x08\x5b\x52\x2a\x2d\xd0\x77", b"something"],
            [b"\x62\xc0\x14\x74\xf0\x89\xb0\x7d\xae\x60\x34\x91\x67\x5d\xc5\xb5\x74\x8f\x70\x49", b"something"],
            [b"\x72\x9a\xf7\x29\x4b\xe5\x95\xa0\xef\xd7\xd8\x91\xc9\xe5\x1f\x89\xc0\x79\x50\xc7", b"something"],
            [b"\x83\xe3\xe5\xa1\x6d\x3b\x69\x6a\x03\x14\xb3\x0b\x25\x34\x80\x4d\xd5\xe1\x11\x97", b"something"],
            [b"\x87\x03\xdf\x24\x17\xe0\xd7\xc5\x9d\x06\x3c\xaa\x95\x83\xcb\x10\xa4\xd2\x05\x32", b"something"],
            [b"\x8d\xff\xcd\x74\xe5\xb5\x92\x35\x12\x91\x6c\x6a\x64\xb5\x02\x68\x9c\xfa\x65\xe1", b"something"],
            [b"\x95\xa4\xd7\xcc\xcb\x52\x04\x73\x38\x74\xfa\x87\x28\x5a\x17\x6f\xe1\xe9\xe2\x40", b"something"],
            [b"\x99\xb2\xfc\xba\x81\x20\xbe\xdd\x04\x8f\xe7\x9f\x52\x62\xa6\x69\x0e\xd3\x8c\x39", b"something"],
            [b"\xa4\x20\x2b\x8b\x8a\xfd\x53\x54\xe3\xe4\x0a\x21\x9b\xdc\x17\xf6\x00\x1b\xf2\xcf", b"something"],
            [b"\xa9\x4f\x53\x74\xfc\xe5\xed\xbc\x8e\x2a\x86\x97\xc1\x53\x31\x67\x7e\x6e\xbf\x0b", b"something"],
            [b"\xa9\x64\x7f\x4a\x0a\x14\x04\x2d\x91\xdc\x33\xc0\x32\x80\x30\xa7\x15\x7c\x93\xae", b"something"],
            [b"\xaa\x6c\xff\xe5\x18\x57\x32\x68\x9c\x18\xf3\x7a\x7f\x86\x17\x0c\xb7\x30\x4c\x2a", b"something"],
            [b"\xaa\xe4\xa2\xe3\xc5\x1c\x04\x60\x6d\xcb\x37\x23\x45\x6e\x58\xf3\xed\x21\x4f\x45", b"something"],
            [b"\xc3\x7a\x43\xe9\x40\xdf\xb5\xba\xf5\x81\xa0\xb8\x2b\x35\x1d\x48\x30\x5f\xc8\x85", b"something"],
            [b"\xd2\x57\x16\x07\xe2\x41\xec\xf5\x90\xed\x94\xb1\x2d\x87\xc9\x4b\xab\xe3\x6d\xb6", b"something"],
            [b"\xf7\x35\x07\x1c\xbe\xe1\x90\xd7\x6b\x70\x4c\xe6\x83\x84\xfc\x21\xe3\x89\xfb\xe7", b"something"],
            [b"\x04\x11\x0d\x81\x6c\x38\x08\x12\xa4\x27\x96\x8e\xce\x99\xb1\xc9\x63\xdf\xbc\xe6", ''],
            [b"\x09\x5e\x7b\xae\xa6\xa6\xc7\xc4\xc2\xdf\xeb\x97\x7e\xfa\xc3\x26\xaf\x55\x2d\x87", ''],
            [b"\x0a\x51\x7d\x75\x5c\xeb\xbf\x66\x31\x2b\x30\xff\xf7\x13\x66\x6a\x9c\xb9\x17\xe0", ''],
            [b"\x24\xdd\x37\x8f\x51\xad\xc6\x7a\x50\xe3\x39\xe8\x03\x1f\xe9\xbd\x4a\xaf\xab\x36", ''],
            [b"\x29\x3f\x98\x2d\x00\x05\x32\xa7\x86\x1a\xb1\x22\xbd\xc4\xbb\xfd\x26\xbf\x90\x30", ''],
            [b"\x2c\xf5\x73\x2f\x01\x7b\x0c\xf1\xb1\xf1\x3a\x14\x78\xe1\x02\x39\x71\x6b\xf6\xb5", ''],
            [b"\x31\xc6\x40\xb9\x2c\x21\xa1\xf1\x46\x5c\x91\x07\x0b\x4b\x3b\x4d\x68\x54\x19\x5f", ''],
            [b"\x37\xf9\x98\x76\x48\x13\xb1\x36\xdd\xf5\xa7\x54\xf3\x40\x63\xfd\x03\x06\x5e\x36", ''],
            [b"\x37\xfa\x39\x9a\x74\x9c\x12\x1f\x8a\x15\xce\x77\xe3\xd9\xf9\xbe\xc8\x02\x0d\x7a", ''],
            [b"\x4f\x36\x65\x9f\xa6\x32\x31\x0b\x6e\xc4\x38\xde\xa4\x08\x5b\x52\x2a\x2d\xd0\x77", ''],
            [b"\x62\xc0\x14\x74\xf0\x89\xb0\x7d\xae\x60\x34\x91\x67\x5d\xc5\xb5\x74\x8f\x70\x49", ''],
            [b"\x72\x9a\xf7\x29\x4b\xe5\x95\xa0\xef\xd7\xd8\x91\xc9\xe5\x1f\x89\xc0\x79\x50\xc7", ''],
            [b"\x83\xe3\xe5\xa1\x6d\x3b\x69\x6a\x03\x14\xb3\x0b\x25\x34\x80\x4d\xd5\xe1\x11\x97", ''],
            [b"\x87\x03\xdf\x24\x17\xe0\xd7\xc5\x9d\x06\x3c\xaa\x95\x83\xcb\x10\xa4\xd2\x05\x32", ''],
            [b"\x8d\xff\xcd\x74\xe5\xb5\x92\x35\x12\x91\x6c\x6a\x64\xb5\x02\x68\x9c\xfa\x65\xe1", ''],
            [b"\x95\xa4\xd7\xcc\xcb\x52\x04\x73\x38\x74\xfa\x87\x28\x5a\x17\x6f\xe1\xe9\xe2\x40", ''],
            [b"\x99\xb2\xfc\xba\x81\x20\xbe\xdd\x04\x8f\xe7\x9f\x52\x62\xa6\x69\x0e\xd3\x8c\x39", ''],
            [b"\xa4\x20\x2b\x8b\x8a\xfd\x53\x54\xe3\xe4\x0a\x21\x9b\xdc\x17\xf6\x00\x1b\xf2\xcf", ''],
            [b"\xa9\x4f\x53\x74\xfc\xe5\xed\xbc\x8e\x2a\x86\x97\xc1\x53\x31\x67\x7e\x6e\xbf\x0b", ''],
            [b"\xa9\x64\x7f\x4a\x0a\x14\x04\x2d\x91\xdc\x33\xc0\x32\x80\x30\xa7\x15\x7c\x93\xae", ''],
            [b"\xaa\x6c\xff\xe5\x18\x57\x32\x68\x9c\x18\xf3\x7a\x7f\x86\x17\x0c\xb7\x30\x4c\x2a", ''],
            [b"\xaa\xe4\xa2\xe3\xc5\x1c\x04\x60\x6d\xcb\x37\x23\x45\x6e\x58\xf3\xed\x21\x4f\x45", ''],
            [b"\xc3\x7a\x43\xe9\x40\xdf\xb5\xba\xf5\x81\xa0\xb8\x2b\x35\x1d\x48\x30\x5f\xc8\x85", ''],
            [b"\xd2\x57\x16\x07\xe2\x41\xec\xf5\x90\xed\x94\xb1\x2d\x87\xc9\x4b\xab\xe3\x6d\xb6", ''],
            [b"\xf7\x35\x07\x1c\xbe\xe1\x90\xd7\x6b\x70\x4c\xe6\x83\x84\xfc\x21\xe3\x89\xfb\xe7", '']
        ]
        h = self._feed_trie(test)
        self.assertTrue(h.hex() == '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421')

    def _feed_trie(self, test_data: list) -> bytes:
        t = Trie()
        for data in test_data:
            if data[1]:
                t.update(data[0], data[1])
            else:
                t.delete(data[0])
        return t.get_root_hash()
